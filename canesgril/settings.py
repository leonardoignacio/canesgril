"""
Django settings for canesgril project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
#import dj_database_url #Se for converter URL em dicionário

load_dotenv() # Vaiaveis de ambiente do arquivo .env
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY') 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
#DEBUG=True
#ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = ['.railway.app', 'canesgril-production.up.railway.app', 'localhost', '104.18.11.246', '66.33.22.120', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'funcionario',
    'churras',
    'usuarios',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'storages',
     #'django_storage_supabase',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Adicione esta linha
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'canesgril.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'canesgril.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
#DATABASES = {'default': dj_database_url.parse(os.environ.get('DATABASE_URL'), conn_max_age=600, ssl_require=True,)}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('dbname', 'postgres'),
        'USER': os.environ.get('user', 'postgres'),
        'PASSWORD': os.environ.get('password'),
        'HOST': os.environ.get('host'),
        'PORT': os.environ.get('port'),
        'OPTIONS': {
            'sslmode': 'require',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# A URL onde os arquivos estáticos serão acessíveis no navegador
STATIC_URL = '/static/'
# O diretório onde 'collectstatic' junta os arquivos estáticos na produção.
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Diretórios adicionais onde o Django vai procurar por arquivos estáticos
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Mantido, útil para estrutura de projeto.
# Whitenoise é a escolha ideal para Railway.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Configurações para django-storages com Supabase S3
AWS_ACCESS_KEY_ID = os.environ.get('SUPABASE_S3_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('SUPABASE_S3_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('SUPABASE_BUCKET_NAME') # O nome doseu bucket no Supabase
AWS_S3_ENDPOINT_URL = os.environ.get('SUPABASE_S3_ENDPOINT_URL') # Ex:https://<project-ref>.supabase.co/storage/v1/s3
AWS_S3_REGION_NAME = os.environ.get('SUPABASE_S3_REGION_NAME', 'us-east-1') #Região do seu projeto Supabase
AWS_S3_SIGNATURE_VERSION = 's3v4' # Necessário para compatibilidade S3
AWS_S3_FILE_OVERWRITE = False # Evita sobrescrever arquivos com o mesmo nome
AWS_DEFAULT_ACL = None # Define ACLs para objetos (pode ser 'public-read' se obucket for público ou None)
# Configuração do Default File Storage para arquivos de mídia
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Certifique-se de que o caminho 'public' está correto para o seu bucket.
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/public/" # Ajuste'public/' se necessário

# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Força o uso de cookies CSRF apenas em conexões HTTPS
CSRF_COOKIE_SECURE = True

# Força o uso de cookies de sessão apenas em conexões HTTPS
SESSION_COOKIE_SECURE = True

# Adicione o domínio base do Railway e qualquer domínio personalizado
CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app',             # Para cobrir seu domínio Railway padrão
    'https://canesgril-production.up.railway.app', # O domínio exato do seu ambiente de produção
    # 'https://seusitepersonalizado.com',  # Se você tiver um domínio personalizado
    # 'https://www.seusitepersonalizado.com', # E a versão com www
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Não desabilita loggers que já podem existir

    # Define formatos de saída para os logs
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    # Define onde os logs serão enviados (neste caso, para o console/stdout)
    'handlers': {
        'console': {
            'level': 'DEBUG', # O handler 'console' vai exibir mensagens de nível DEBUG e acima
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Usa o formato 'verbose' definido acima
        },
    },

    # Define loggers específicos e seus níveis de verbosidade
    'loggers': {
        'django': { # Logger para o framework Django em geral
            'handlers': ['console'],
            'level': 'INFO', # Nível INFO para logs gerais do Django
            'propagate': False, # Impede que logs sejam enviados para o logger pai
        },
        'django.request': { # Logger para requisições HTTP recebidas pelo Django
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para ver detalhes das requisições
            'propagate': False,
        },
        'django_storage_supabase': { # Seu logger customizado, se estiver usando essa lib
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para depurar a lib 'django_storage_supabase'
            'propagate': False,
        },
        'botocore': { # ESSENCIAL: Logger para o BotoCore (base do boto3), para ver chamadas de baixo nível
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para capturar todas as requisições HTTP e respostas
            'propagate': False,
        },
        's3transfer': { # ESSENCIAL: Logger para o s3transfer (usado pelo boto3 para uploads)
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para depurar o processo de transferência
            'propagate': False,
        },
        'storages': { # ESSENCIAL: Logger para o django-storages
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para depurar o comportamento do django-storages
            'propagate': False,
        },
        '': { # Logger raiz: captura quaisquer logs que não foram tratados pelos loggers acima.
              # Ativar DEBUG aqui é um "catch-all" para garantir que nada passe despercebido.
            'handlers': ['console'],
            'level': 'DEBUG', # Nível DEBUG para o logger raiz
            'propagate': False,
        },
    },
}